import hre from "hardhat";
import dotenv from "dotenv";
const { ethers } = hre;

// Charger les variables d'environnement
dotenv.config();

async function main() {
  console.log("üöÄ D√©ploiement du contrat CarteGriseNFT sur Oasis Sapphire...");

  // V√©rifier que la cl√© priv√©e est configur√©e
  if (!process.env.PRIVATE_KEY) {
    throw new Error("‚ùå PRIVATE_KEY non d√©finie dans .env");
  }

  console.log("üîê Utilisation de la cl√© priv√©e pour le d√©ploiement...");

  // Cr√©er le provider et le signer
  const provider = new ethers.JsonRpcProvider("https://testnet.sapphire.oasis.dev");
  const signer = new ethers.Wallet(process.env.PRIVATE_KEY, provider);
  
  console.log("üë§ D√©ployeur:", signer.address);

  // R√©cup√©rer le contrat factory
  const CarteGriseNFT = await ethers.getContractFactory("CarteGriseNFT", signer);
  
  console.log("üì¶ D√©ploiement en cours...");
  
  // D√©ployer le contrat
  const contract = await CarteGriseNFT.deploy();
  await contract.waitForDeployment();
  
  // R√©cup√©rer l'adresse du contrat d√©ploy√©
  const address = await contract.getAddress();
  
  console.log("‚úÖ CarteGriseNFT d√©ploy√© avec succ√®s!");
  console.log("üìç Adresse du contrat:", address);
  console.log("üîó Explorer Testnet:", `https://explorer.testnet.oasis.io/mainnet/address/${address}`);
  console.log("üîó Explorer Mainnet:", `https://explorer.oasis.io/address/${address}`);
  
  // Configurer le premier concessionnaire (le d√©ployeur)
  console.log("‚öôÔ∏è Configuration du concessionnaire...");
  const tx = await contract.setConcessionnaire(signer.address, true);
  await tx.wait();
  
  console.log("‚úÖ Concessionnaire configur√©:", signer.address);
  
  // V√©rifier la configuration
  const isConcessionnaire = await contract.isConcessionnaire(signer.address);
  console.log("‚úÖ V√©rification concessionnaire:", isConcessionnaire);
  
  console.log("\nüéâ D√©ploiement termin√©!");
  console.log("üìã Copie cette adresse dans ton .env:");
  console.log(`NEXT_PUBLIC_CARTE_GRISE_NFT_ADDRESS=${address}`);
  
  return address;
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("‚ùå Erreur lors du d√©ploiement:", error);
    process.exit(1);
  });
